A mini lisp written by C

* Errors in the book
** Chapter 9
#+begin_src C
function builtin_op
   if (y->num == 0) {
        lval_del(x); lval_del(y); 
        lval_del(a);//cannot delete a here.
        x = lval_err("Division By Zero!"); break;
      } else {
        x->num /= y->num;
      }
#+end_src
** Chapter 12
function lval_copy
#+begin_src C
case LVAL_FUN:
        if(v->builtin){
            x->builtin = v->builtin; 
        }else {
            x->builtin = v->builtin; //here, we should make sure x->builtin is initialize to 0, otherwise it could be any value so I add this line.
            x->env = lenv_copy(v->env);
            x->formals = lval_copy(v->formals);
            x->body = lval_copy(v->body);
        }
        break;
#+end_src
This bug is fixed in the book, but this bug should be explicitly
pointed out. Otherwise, reader will confuse and take times to fix this
bug.
* Questions
- test case =+ 2 (head {2 4})= cannot eval correctly, because head
  return a qexpr, which is not number, and not able to caculate. Edit:
  I can do it this way =+ 2 (eval (head {2 4}))=, this could be right.
- We need to prevent user to def the builtin symbols, like =head=,
  user can redefine it like =def {head} 1=, then we will lose this
  builtin function. 
- 'exit' function, to implement it. We let func envoke even only no
  argument is needed. I've considered =(S-expression)= as =(eval
  (S-expression))=, but this also confuse user. The problem here is
  that LISPET Couldn't distinguish "function itself" and "function
  call without any argument". This should be done later, otherwise,
  any function should at least has one argument.
